From 0d8db00e25fff3c8b7b29481e7c3d2887928d3ca Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Sat, 9 Dec 2017 21:48:09 +0800
Subject: [PATCH 1/1] add sbi console again

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>
---
 arch/riscv/Kconfig               |   5 ++
 arch/riscv/include/asm/sbi-con.h |   8 ++
 arch/riscv/kernel/Makefile       |   1 +
 arch/riscv/kernel/irq.c          |  18 +++++
 arch/riscv/kernel/sbi-con.c      | 155 +++++++++++++++++++++++++++++++++++++++
 arch/riscv/kernel/setup.c        |   7 --
 6 files changed, 187 insertions(+), 7 deletions(-)
 create mode 100644 arch/riscv/include/asm/sbi-con.h
 create mode 100644 arch/riscv/kernel/sbi-con.c

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index 2c6adf1..7aadb86 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -162,6 +162,11 @@ config CPU_SUPPORTS_32BIT_KERNEL
 config CPU_SUPPORTS_64BIT_KERNEL
 	bool
 
+config SBI_CONSOLE
+	tristate "sbi console support"
+	select tty
+	default y
+
 choice
 	prompt "CPU Tuning"
 	default TUNE_GENERIC
diff --git a/arch/riscv/include/asm/sbi-con.h b/arch/riscv/include/asm/sbi-con.h
new file mode 100644
index 0000000..6984282
--- /dev/null
+++ b/arch/riscv/include/asm/sbi-con.h
@@ -0,0 +1,8 @@
+#ifndef _ASM_RISCV_SBI_CON_H
+#define _ASM_RISCV_SBI_CON_H
+
+#include <linux/irqreturn.h>
+
+irqreturn_t sbi_console_isr(void);
+
+#endif /* _ASM_RISCV_SBI_CON_H */
diff --git a/arch/riscv/kernel/Makefile b/arch/riscv/kernel/Makefile
index ab8baf7..afe9dde 100644
--- a/arch/riscv/kernel/Makefile
+++ b/arch/riscv/kernel/Makefile
@@ -29,5 +29,6 @@ CFLAGS_setup.o := -mcmodel=medany
 obj-$(CONFIG_SMP)		+= smpboot.o
 obj-$(CONFIG_SMP)		+= smp.o
 obj-$(CONFIG_MODULES)		+= module.o
+obj-$(CONFIG_SBI_CONSOLE)	+= sbi-con.o
 
 clean:
diff --git a/arch/riscv/kernel/irq.c b/arch/riscv/kernel/irq.c
index 328718e..09e7db3 100644
--- a/arch/riscv/kernel/irq.c
+++ b/arch/riscv/kernel/irq.c
@@ -20,6 +20,12 @@
 #include <linux/irqchip/irq-riscv-intc.h>
 #endif
 
+#ifdef CONFIG_SBI_CONSOLE
+#include <asm/sbi-con.h>
+#endif
+
+#include <asm/sbi.h>
+
 void __init init_IRQ(void)
 {
 	irqchip_init();
@@ -36,4 +42,16 @@ asmlinkage void __irq_entry do_IRQ(unsigned int cause, struct pt_regs *regs)
 	 */
 	riscv_intc_irq(cause, regs);
 #endif
+
+    sbi_console_putchar('o');
+    sbi_console_putchar('o');
+    sbi_console_putchar('o');
+    sbi_console_putchar('\n');
+#ifdef CONFIG_SBI_CONSOLE
+    sbi_console_putchar('i');
+    sbi_console_putchar('i');
+    sbi_console_putchar('i');
+    sbi_console_putchar('\n');
+	sbi_console_isr();
+#endif
 }
diff --git a/arch/riscv/kernel/sbi-con.c b/arch/riscv/kernel/sbi-con.c
new file mode 100644
index 0000000..10e499d
--- /dev/null
+++ b/arch/riscv/kernel/sbi-con.c
@@ -0,0 +1,155 @@
+#include <linux/init.h>
+#include <linux/console.h>
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/tty_driver.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+
+#include <asm/sbi.h>
+
+static DEFINE_SPINLOCK(sbi_tty_port_lock);
+static struct tty_port sbi_tty_port;
+static struct tty_driver *sbi_tty_driver;
+
+irqreturn_t sbi_console_isr(void)
+{
+	int ch = sbi_console_getchar();
+	if (ch < 0)
+		return IRQ_NONE;
+
+	spin_lock(&sbi_tty_port_lock);
+	tty_insert_flip_char(&sbi_tty_port, ch, TTY_NORMAL);
+	tty_flip_buffer_push(&sbi_tty_port);
+	spin_unlock(&sbi_tty_port_lock);
+
+	return IRQ_HANDLED;
+}
+
+static int sbi_tty_open(struct tty_struct *tty, struct file *filp)
+{
+	return 0;
+}
+
+static int sbi_tty_write(struct tty_struct *tty,
+	const unsigned char *buf, int count)
+{
+	const unsigned char *end;
+
+	for (end = buf + count; buf < end; buf++) {
+		sbi_console_putchar(*buf);
+	}
+	return count;
+}
+
+static int sbi_tty_write_room(struct tty_struct *tty)
+{
+	return 1024; /* arbitrary */
+}
+
+static const struct tty_operations sbi_tty_ops = {
+	.open		= sbi_tty_open,
+	.write		= sbi_tty_write,
+	.write_room	= sbi_tty_write_room,
+};
+
+
+static void sbi_console_write(struct console *co, const char *buf, unsigned n)
+{
+	for ( ; n > 0; n--, buf++) {
+		if (*buf == '\n')
+			sbi_console_putchar('\r');
+		sbi_console_putchar(*buf);
+	}
+}
+
+static struct tty_driver *sbi_console_device(struct console *co, int *index)
+{
+	*index = co->index;
+	return sbi_tty_driver;
+}
+
+static int sbi_console_setup(struct console *co, char *options)
+{
+	return co->index != 0 ? -ENODEV : 0;
+}
+
+static struct console sbi_console = {
+	.name	= "sbi_console",
+	.write	= sbi_console_write,
+	.device	= sbi_console_device,
+	.setup	= sbi_console_setup,
+	.flags	= CON_PRINTBUFFER,
+	.index	= -1
+};
+
+static int __init sbi_console_init(void)
+{
+	int ret;
+
+	register_console(&sbi_console);
+
+	sbi_tty_driver = tty_alloc_driver(1,
+		TTY_DRIVER_REAL_RAW | TTY_DRIVER_DYNAMIC_DEV);
+	if (unlikely(IS_ERR(sbi_tty_driver)))
+		return PTR_ERR(sbi_tty_driver);
+
+	sbi_tty_driver->driver_name = "sbi";
+	sbi_tty_driver->name = "ttySBI";
+	sbi_tty_driver->major = TTY_MAJOR;
+	sbi_tty_driver->minor_start = 0;
+	sbi_tty_driver->type = TTY_DRIVER_TYPE_SERIAL;
+	sbi_tty_driver->subtype = SERIAL_TYPE_NORMAL;
+	sbi_tty_driver->init_termios = tty_std_termios;
+	tty_set_operations(sbi_tty_driver, &sbi_tty_ops);
+
+	tty_port_init(&sbi_tty_port);
+	tty_port_link_device(&sbi_tty_port, sbi_tty_driver, 0);
+
+	ret = tty_register_driver(sbi_tty_driver);
+	if (unlikely(ret))
+		goto out_tty_put;
+
+	/* Poll the console once, which will trigger future interrupts */
+	sbi_console_isr();
+
+	return ret;
+
+out_tty_put:
+	put_tty_driver(sbi_tty_driver);
+	return ret;
+}
+
+static void __exit sbi_console_exit(void)
+{
+	tty_unregister_driver(sbi_tty_driver);
+	put_tty_driver(sbi_tty_driver);
+}
+
+module_init(sbi_console_init);
+module_exit(sbi_console_exit);
+
+MODULE_DESCRIPTION("RISC-V SBI console driver");
+MODULE_LICENSE("GPL");
+
+#ifdef CONFIG_EARLY_PRINTK
+
+static struct console early_console_dev __initdata = {
+	.name	= "early",
+	.write	= sbi_console_write,
+	.flags	= CON_PRINTBUFFER | CON_BOOT,
+	.index	= -1
+};
+
+static int __init setup_early_printk(char *str)
+{
+	if (early_console == NULL) {
+		early_console = &early_console_dev;
+		register_console(early_console);
+	}
+	return 0;
+}
+
+early_param("earlyprintk", setup_early_printk);
+
+#endif
diff --git a/arch/riscv/kernel/setup.c b/arch/riscv/kernel/setup.c
index 8fbb674..2c9cf3d 100644
--- a/arch/riscv/kernel/setup.c
+++ b/arch/riscv/kernel/setup.c
@@ -212,13 +212,6 @@ static void __init setup_bootmem(void)
 
 void __init setup_arch(char **cmdline_p)
 {
-#if defined(CONFIG_HVC_RISCV_SBI)
-	if (likely(early_console == NULL)) {
-		early_console = &riscv_sbi_early_console_dev;
-		register_console(early_console);
-	}
-#endif
-
 #ifdef CONFIG_CMDLINE_BOOL
 #ifdef CONFIG_CMDLINE_OVERRIDE
 	strlcpy(boot_command_line, builtin_cmdline, COMMAND_LINE_SIZE);
-- 
2.7.4

