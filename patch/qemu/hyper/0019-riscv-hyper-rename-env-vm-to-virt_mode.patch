From 0ec0e79dd77786219d6ed7253b13caad86793120 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Fri, 22 Dec 2017 17:55:25 +0800
Subject: [PATCH 19/19] riscv-hyper: rename env->vm to virt_mode

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>
---
 target-riscv/cpu.h       |  4 ++--
 target-riscv/helper.c    | 16 ++++++++--------
 target-riscv/op_helper.c | 16 ++++++++--------
 3 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index de35f3b..2a0c140 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -168,7 +168,7 @@ typedef struct CPURISCVState {
     /*
      * virutalization mode
      */
-    target_ulong vm;
+    target_ulong virt_mode;
     /* 
      * hold the original virtual address,
      * when an access fault, page fault, or misaligned address exception.
@@ -372,7 +372,7 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
     target_ulong enabled_interrupts = pending_interrupts &
                                       ~env->mideleg & -m_enabled;
 
-    if (env->vm == 0) {
+    if (env->virt_mode == 0) {
         target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
         target_ulong s_enabled = env->priv < PRV_S || (env->priv == PRV_S && sie);
         enabled_interrupts |= pending_interrupts & env->mideleg &
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index 9499f1d..8e6b8ef 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -155,7 +155,7 @@ static int get_physical_address(CPURISCVState *env, hwaddr *physical,
     CPUState *cs = CPU(riscv_env_get_cpu(env));
 
     target_ulong mode = env->priv;
-    target_ulong virt_mode = env->vm;
+    target_ulong virt_mode = env->virt_mode;
 
     if (access_type != MMU_INST_FETCH) {
         if (get_field(env->mstatus, MSTATUS_MPRV)) {
@@ -538,7 +538,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
                 fixed_cause = RISCV_EXCP_U_ECALL;
                 break;
             case PRV_S:
-                if (env->vm == 0) {
+                if (env->virt_mode == 0) {
                     fixed_cause = RISCV_EXCP_S_ECALL;
                 }
                 else {
@@ -576,7 +576,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
 
     target_ulong hdeleg = fixed_cause & ((target_ulong)1 << (TARGET_LONG_BITS - 1))?
             env->hideleg : env->hedeleg;
-    if (env->vm == 1 && !((hdeleg >> bit) & 1)) {
+    if (env->virt_mode == 1 && !((hdeleg >> bit) & 1)) {
         /* trap from virtual machine and not handled int VM*/
         swap_background_background_csrs(env);
     }
@@ -602,14 +602,14 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         s = set_field(s, MSTATUS_SIE, 0);
         csr_write_helper(env, s, CSR_MSTATUS);
         s = env->hstatus;
-        s = set_field(s, HSTATUS_SPV, env->vm);
+        s = set_field(s, HSTATUS_SPV, env->virt_mode);
         csr_write_helper(env, s, CSR_HSTATUS);
         set_privilege(env, PRV_S);
 
-        if (env->vm == 1 && ((hdeleg >> bit) & 1)) {
+        if (env->virt_mode == 1 && ((hdeleg >> bit) & 1)) {
             env->pc = get_host_physical_address(env, env->pc);
         } else {
-            env->vm = 0;
+            env->virt_mode = 0;
         }
     } else {
         /* No need to check MTVEC for misaligned - lower 2 bits cannot be set */
@@ -629,9 +629,9 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         s = set_field(s, MSTATUS_MPIE, get_field(s, MSTATUS_MIE));
         s = set_field(s, MSTATUS_MPP, env->priv);
         s = set_field(s, MSTATUS_MIE, 0);
-        s = set_field(s, MSTATUS_MPV, env->vm);
+        s = set_field(s, MSTATUS_MPV, env->virt_mode);
         csr_write_helper(env, s, CSR_MSTATUS);
-        env->vm = 0;
+        env->virt_mode = 0;
         set_privilege(env, PRV_M);
     }
 
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index baf6663..fcb1f50 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -680,9 +680,9 @@ void validate_csr(CPURISCVState *env, uint64_t which, uint64_t write)
 #ifndef CONFIG_USER_ONLY
     unsigned csr_priv = get_field((which), 0x300);
     unsigned csr_read_only = get_field((which), 0xC00) == 3;
-    unsigned csr_vm = csr_priv == PRV_S && get_field((which), 0xC00) == 2;
+    unsigned csr_hyper = csr_priv == PRV_S && get_field((which), 0xC00) == 2;
     if (((write) && csr_read_only) || (env->priv < csr_priv)
-            || (env->vm && csr_vm)) {
+            || (env->virt_mode && csr_hyper)) {
         do_raise_exception_err(env, RISCV_EXCP_ILLEGAL_INST, env->pc);
     }
 #endif
@@ -776,12 +776,12 @@ target_ulong helper_sret(CPURISCVState *env, target_ulong cpu_pc_deb)
     set_privilege(env, prev_priv);
     csr_write_helper(env, mstatus, CSR_MSTATUS);
 
-    if (env->vm == 0) {
+    if (env->virt_mode == 0) {
         target_ulong hstatus = env->hstatus;
         target_ulong prev_vm = get_field(hstatus, HSTATUS_SPV);
         if (prev_vm) {
             swap_background_background_csrs(env);
-            env->vm = 1;
+            env->virt_mode = 1;
             hstatus = set_field(hstatus, HSTATUS_SPV, 0);
             csr_write_helper(env, hstatus, CSR_HSTATUS);
         }
@@ -793,7 +793,7 @@ target_ulong helper_sret(CPURISCVState *env, target_ulong cpu_pc_deb)
 target_ulong helper_hret(CPURISCVState *env, target_ulong cpu_pc_deb)
 {
     if (env->priv > PRV_S
-            || (env->priv == PRV_S && (env->vm || env->mstatus & MSTATUS_TSR))) {
+            || (env->priv == PRV_S && (env->virt_mode || env->mstatus & MSTATUS_TSR))) {
         helper_raise_exception(env, RISCV_EXCP_ILLEGAL_INST);
     }
 
@@ -816,7 +816,7 @@ target_ulong helper_hret(CPURISCVState *env, target_ulong cpu_pc_deb)
      * no need to set hstatus.spv, it's remains 0.
      */
     swap_background_background_csrs(env);
-    env->vm = 1;
+    env->virt_mode = 1;
 
     return retpc;
 }
@@ -844,10 +844,10 @@ target_ulong helper_mret(CPURISCVState *env, target_ulong cpu_pc_deb)
     csr_write_helper(env, mstatus, CSR_MSTATUS);
 
     if (prev_priv < PRV_M) {
-        if (prev_vm) {//env->vm cannot be 1(virtualization mode) in now priv(M)
+        if (prev_vm) {//env->virt_mode cannot be 1(virtualization mode) in now priv(M)
             swap_background_background_csrs(env);
         }
-        env->vm = prev_vm;
+        env->virt_mode = prev_vm;
     }
 
     return retpc;
-- 
2.7.4

