From 690f5658c1ea844f8ed360857ae7142f8fdea000 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Sun, 21 Jan 2018 23:29:39 +0800
Subject: [PATCH 22/22] add vm entry and vm exit operation

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>
---
 target-riscv/cpu.h       | 19 +++++++++++++
 target-riscv/helper.c    | 36 ++++++++++++------------
 target-riscv/op_helper.c | 71 +++++++++++++++++-------------------------------
 3 files changed, 63 insertions(+), 63 deletions(-)

diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index 6808509..a1dfff7 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -227,6 +227,7 @@ typedef struct CPURISCVState {
      * Supervisor Guest(Stage 2) Address Translation and Protection Register
      */
     target_ulong sgatp;
+    target_ulong host_pc;
     /* end hypervisor csr*/
 #endif
 
@@ -458,6 +459,24 @@ target_ulong csr_read_helper(CPURISCVState *env, target_ulong csrno);
 
 void validate_csr(CPURISCVState *env, uint64_t which, uint64_t write);
 
+#define swap_foreground_background_csr(env, csr_no)                     \
+    do{                                                                 \
+        target_ulong backup_csr;                                        \
+        backup_csr = csr_read_helper(env, CSR_##csr_no);                \
+        backup_csr = helper_csrrw(env, backup_csr, CSR_B##csr_no);      \
+        csr_write_helper(env, backup_csr, CSR_##csr_no);                \
+    }while(0);
+
+#define swap_gpr_and_background_csr(env, gpr_no, csr_no)                \
+    do{                                                                 \
+        target_ulong backup_csr;                                        \
+        backup_csr = helper_csrrw(env, env->gpr[gpr_no], csr_no);       \
+        env->gpr[gpr_no] = backup_csr;                                  \
+    }while(0);
+
+void swap_foreground_background_csrs(CPURISCVState *env);
+void swap_gpr_and_background_csrs(CPURISCVState *env);
+
 #include "exec/exec-all.h"
 
 #endif /* RISCV_CPU_H */
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index ac2e3e7..987b6aa 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -572,13 +572,11 @@ void riscv_cpu_do_interrupt(CPUState *cs)
 
     if (bit & ((target_ulong)1 << (TARGET_LONG_BITS - 1))) {
         deleg = env->mideleg, bit &= ~((target_ulong)1 << (TARGET_LONG_BITS - 1));
-    }
-
-    target_ulong hdeleg = fixed_cause & ((target_ulong)1 << (TARGET_LONG_BITS - 1))?
-            env->hideleg : env->hedeleg;
-    if (env->virt_mode == 1 && !((hdeleg >> bit) & 1)) {
-        /* trap from virtual machine and not handled int VM*/
-        swap_background_background_csrs(env);
+        if (env->virt_mode) {
+            deleg &= env->hideleg;
+        }
+    } else if (env->virt_mode) {
+        deleg &= env->hedeleg;
     }
 
     if (env->priv <= PRV_S && bit < 64 && ((deleg >> bit) & 1)) {
@@ -601,16 +599,12 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         s = set_field(s, MSTATUS_SPP, env->priv);
         s = set_field(s, MSTATUS_SIE, 0);
         csr_write_helper(env, s, CSR_MSTATUS);
-        s = env->hstatus;
-        s = set_field(s, HSTATUS_SPV, env->virt_mode);
-        csr_write_helper(env, s, CSR_HSTATUS);
-        set_privilege(env, PRV_S);
-
-        if (env->virt_mode == 1 && ((hdeleg >> bit) & 1)) {
-            env->pc = get_host_physical_address(env, env->pc);
-        } else {
-            env->virt_mode = 0;
+        if (env->virt_mode == 0) {
+            s = env->hstatus;
+            s = set_field(s, HSTATUS_SPV, env->virt_mode);
+            csr_write_helper(env, s, CSR_HSTATUS);
         }
+        set_privilege(env, PRV_S);
     } else {
         /* No need to check MTVEC for misaligned - lower 2 bits cannot be set */
         env->pc = env->mtvec;
@@ -631,10 +625,18 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         s = set_field(s, MSTATUS_MIE, 0);
         s = set_field(s, MSTATUS_MPV, env->virt_mode);
         csr_write_helper(env, s, CSR_MSTATUS);
-        env->virt_mode = 0;
         set_privilege(env, PRV_M);
     }
 
+    /* trap from virtual machine and not handled int VM */
+    if (env->virt_mode == 1 && bit < 64 && !((deleg >> bit) & 1)) {
+        /* perform vm exit */
+        env->pc = env->host_pc;
+        swap_gpr_and_background_csrs(env);
+        swap_foreground_background_csrs(env);
+        env->virt_mode = 0;
+    }
+
     /*
      * temporarily remove wfi signal here.
      */
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index 19c778f..a42bd29 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -749,25 +749,8 @@ void set_privilege(CPURISCVState *env, target_ulong newpriv)
     env->priv = newpriv;
 }
 
-#define swap_foreground_background_csr(env, csr_no)                     \
-    do{                                                                 \
-        target_ulong backup_csr;                                        \
-        backup_csr = csr_read_helper(env, CSR_##csr_no);                \
-        backup_csr = helper_csrrw(env, backup_csr, CSR_B##csr_no);      \
-        csr_write_helper(env, backup_csr, CSR_##csr_no);                \
-    }while(0);
-
-#define swap_gpr_and_csr(env, gpr_no, csr_no)                           \
-    do{                                                                 \
-        target_ulong backup_csr;                                        \
-        backup_csr = helper_csrrw(env, env->gpr[gpr_no], csr_no);       \
-        env->gpr[gpr_no] = backup_csr;                                  \
-    }while(0);
-
-void swap_background_background_csrs(CPURISCVState *env){
-    swap_gpr_and_csr(env, 4, CSR_BTP);
-    swap_gpr_and_csr(env, 2, CSR_BSP);
-
+void swap_foreground_background_csrs(CPURISCVState *env)
+{
     swap_foreground_background_csr(env, SSTATUS);
     swap_foreground_background_csr(env, SIP);
     swap_foreground_background_csr(env, SIP);
@@ -780,6 +763,27 @@ void swap_background_background_csrs(CPURISCVState *env){
     swap_foreground_background_csr(env, SATP);
 }
 
+void swap_gpr_and_background_csrs(CPURISCVState *env)
+{
+    swap_gpr_and_background_csr(env, 2, CSR_BSP);
+    swap_gpr_and_background_csr(env, 4, CSR_BTP);
+}
+
+/*
+ * perform VM entry
+ * 1. save host pc, sp, tp
+ * 2, swap foreground and background CSR.
+ * 3. set virt mode
+ * must return from S/M(V==0) to S/U(V==1)
+ * no need to set hstatus.spv, it's remains 0.
+ */
+static void perform_vm_entry(CPURISCVState *env){
+    env->host_pc = env->pc;
+    swap_gpr_and_background_csrs(env);
+    swap_foreground_background_csrs(env);
+    env->virt_mode = 1;
+}
+
 target_ulong helper_sret(CPURISCVState *env, target_ulong cpu_pc_deb)
 {
     if (!(env->priv >= PRV_S)) {
@@ -800,23 +804,12 @@ target_ulong helper_sret(CPURISCVState *env, target_ulong cpu_pc_deb)
     set_privilege(env, prev_priv);
     csr_write_helper(env, mstatus, CSR_MSTATUS);
 
-    if (env->virt_mode == 0) {
-        target_ulong hstatus = env->hstatus;
-        target_ulong prev_vm = get_field(hstatus, HSTATUS_SPV);
-        if (prev_vm) {
-            swap_background_background_csrs(env);
-            env->virt_mode = 1;
-            hstatus = set_field(hstatus, HSTATUS_SPV, 0);
-            csr_write_helper(env, hstatus, CSR_HSTATUS);
-        }
-    }
-
     return retpc;
 }
 
 target_ulong helper_hret(CPURISCVState *env, target_ulong cpu_pc_deb)
 {
-    if (env->priv > PRV_S
+    if (env->priv < PRV_S
             || (env->priv == PRV_S && (env->virt_mode || env->mstatus & MSTATUS_TSR))) {
         helper_raise_exception(env, RISCV_EXCP_ILLEGAL_INST);
     }
@@ -835,12 +828,7 @@ target_ulong helper_hret(CPURISCVState *env, target_ulong cpu_pc_deb)
     set_privilege(env, prev_priv);
     csr_write_helper(env, mstatus, CSR_MSTATUS);
 
-    /*
-     * must return from HS/M(V==0) to S/U(V==1)
-     * no need to set hstatus.spv, it's remains 0.
-     */
-    swap_background_background_csrs(env);
-    env->virt_mode = 1;
+    perform_vm_entry(env);
 
     return retpc;
 }
@@ -858,22 +846,13 @@ target_ulong helper_mret(CPURISCVState *env, target_ulong cpu_pc_deb)
 
     target_ulong mstatus = env->mstatus;
     target_ulong prev_priv = get_field(mstatus, MSTATUS_MPP);
-    target_ulong prev_vm = get_field(mstatus, MSTATUS_MPV);
     mstatus = set_field(mstatus, MSTATUS_MIE,
                         get_field(mstatus, MSTATUS_MPIE));
     mstatus = set_field(mstatus, MSTATUS_MPIE, 1);
     mstatus = set_field(mstatus, MSTATUS_MPP, PRV_U);
-    mstatus = set_field(mstatus, MSTATUS_MPV, 0);
     set_privilege(env, prev_priv);
     csr_write_helper(env, mstatus, CSR_MSTATUS);
 
-    if (prev_priv < PRV_M) {
-        if (prev_vm) {//env->virt_mode cannot be 1(virtualization mode) in now priv(M)
-            swap_background_background_csrs(env);
-        }
-        env->virt_mode = prev_vm;
-    }
-
     return retpc;
 }
 
-- 
2.7.4

