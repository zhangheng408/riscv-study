From e1bab244a6378054db1938df69a75ea894b87c93 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Mon, 26 Feb 2018 02:54:09 -0500
Subject: [PATCH 25/25] fix vm entry and vm exit

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>
---
 target-riscv/cpu.h       |  9 +++++----
 target-riscv/helper.c    | 11 +++++++++--
 target-riscv/op_helper.c | 48 ++++++++++++++++++++++++++++++++++++------------
 3 files changed, 50 insertions(+), 18 deletions(-)

diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index 14c432e..ba92b18 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -469,15 +469,16 @@ void validate_csr(CPURISCVState *env, uint64_t which, uint64_t write);
 #define swap_foreground_background_csr(env, csr_no)                     \
     do{                                                                 \
         target_ulong backup_csr;                                        \
-        backup_csr = csr_read_helper(env, CSR_##csr_no);                \
-        backup_csr = helper_csrrw(env, backup_csr, CSR_B##csr_no);      \
-        csr_write_helper(env, backup_csr, CSR_##csr_no);                \
+        backup_csr = env->b##csr_no;                                    \
+        env->b##csr_no = env->csr_no;                                   \
+        env->csr_no = backup_csr;                                       \
     }while(0);
 
 #define swap_gpr_and_background_csr(env, gpr_no, csr_no)                \
     do{                                                                 \
         target_ulong backup_csr;                                        \
-        backup_csr = helper_csrrw(env, env->gpr[gpr_no], csr_no);       \
+        backup_csr = env->csr_no;                                       \
+        env->csr_no = env->gpr[gpr_no];                                 \
         env->gpr[gpr_no] = backup_csr;                                  \
     }while(0);
 
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index eccb810..b075ac1 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -407,6 +407,12 @@ void tlb_fill(CPUState *cs, target_ulong addr, MMUAccessType access_type,
 void riscv_cpu_unassigned_access(CPUState *cs, hwaddr addr, bool is_write,
         bool is_exec, int unused, unsigned size)
 {
+    RISCVCPU *cpu = RISCV_CPU(cs);
+    CPURISCVState *env = &cpu->env;
+
+    if (env->virt_mode) {
+        return;
+    }
     printf("unassigned address not implemented for riscv\n");
     printf("are you trying to fetch instructions from an MMIO page?\n");
     printf("unassigned Address: %016" PRIx64 "\n", addr);
@@ -568,7 +574,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         (fixed_cause == RISCV_EXCP_LOAD_ACCESS_FAULT) ||
         (fixed_cause == RISCV_EXCP_STORE_AMO_ACCESS_FAULT) ||
         (fixed_cause == RISCV_EXCP_INST_PAGE_FAULT) ||
-        (fixed_cause == RISCV_EXCP_LOAD_PAGE_FAULT) || 
+        (fixed_cause == RISCV_EXCP_HOST_PAGE_FAULT) ||
         (fixed_cause == RISCV_EXCP_STORE_PAGE_FAULT);
 
     if (bit & ((target_ulong)1 << (TARGET_LONG_BITS - 1))) {
@@ -600,11 +606,11 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             s = set_field(s, MSTATUS_SPP, env->priv);
             s = set_field(s, MSTATUS_SIE, 0);
             csr_write_helper(env, s, CSR_MSTATUS);
-            set_privilege(env, PRV_S);
             // is SPV necessarty ?
             s = env->hstatus;
             s = set_field(s, HSTATUS_SPV, env->virt_mode);
             csr_write_helper(env, s, CSR_HSTATUS);
+            set_privilege(env, PRV_S);
         } else {
             /* handle in M-mode */
             if (hasbadaddr) {
@@ -623,6 +629,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             set_privilege(env, PRV_M);
         }
         env->virt_mode = 0;
+        tlb_flush(cs, 1);
     } else if (env->priv <= PRV_S && bit < 64 && ((deleg >> bit) & 1)) {
         /* handle the trap in S-mode */
         /* No need to check STVEC for misaligned - lower 2 bits cannot be set */
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index 6082159..a7aeb89 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -754,24 +754,48 @@ void set_privilege(CPURISCVState *env, target_ulong newpriv)
     env->priv = newpriv;
 }
 
+static inline void swap_foreground_background_sstatus(CPURISCVState *env)
+{
+    target_ulong ms = env->mstatus;
+    target_ulong mask = SSTATUS_SIE | SSTATUS_SPIE | SSTATUS_UIE
+        | SSTATUS_UPIE | SSTATUS_SPP | SSTATUS_FS | SSTATUS_XS
+        | SSTATUS_SUM | SSTATUS_MXR | SSTATUS_SD;
+    target_ulong bs = env->bsstatus;
+    env->mstatus = (ms & ~mask) | (env->bsstatus & mask);
+    env->bsstatus = ms & mask;
+}
+
+static inline void swap_foreground_background_sip(CPURISCVState *env)
+{
+    target_ulong bsip = env->bsip;
+    env->bsip = env->mip & env->mideleg;
+    env->mip = (env->mip & ~env->mideleg) | (env->bsip & env->mideleg);
+}
+
+static inline void swap_foreground_background_sie(CPURISCVState *env)
+{
+    target_ulong bsie = env->bsie;
+    env->bsie = env->mie & env->mideleg;
+    env->mie = (env->mie & ~env->mideleg) | (env->bsip & env->mideleg);
+}
+
 void swap_foreground_background_csrs(CPURISCVState *env)
 {
-    swap_foreground_background_csr(env, SSTATUS);
-    swap_foreground_background_csr(env, SIP);
-    swap_foreground_background_csr(env, SIP);
-    swap_foreground_background_csr(env, SIE);
-    swap_foreground_background_csr(env, STVEC);
-    swap_foreground_background_csr(env, SSCRATCH);
-    swap_foreground_background_csr(env, SEPC);
-    swap_foreground_background_csr(env, SCAUSE);
-    swap_foreground_background_csr(env, STVAL);
-    swap_foreground_background_csr(env, SATP);
+    swap_foreground_background_sstatus(env);
+    swap_foreground_background_sip(env);
+    swap_foreground_background_sie(env);
+    swap_foreground_background_csr(env, stvec);
+    swap_foreground_background_csr(env, sscratch);
+    swap_foreground_background_csr(env, sepc);
+    swap_foreground_background_csr(env, scause);
+    swap_foreground_background_csr(env, stval);
+    swap_foreground_background_csr(env, satp);
 }
 
 void swap_gpr_and_background_csrs(CPURISCVState *env)
 {
-    swap_gpr_and_background_csr(env, 2, CSR_BSP);
-    swap_gpr_and_background_csr(env, 4, CSR_BTP);
+    swap_gpr_and_background_csr(env, 2, bsp);
+    swap_gpr_and_background_csr(env, 4, btp);
 }
 
 /*
-- 
2.7.4

