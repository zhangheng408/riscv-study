From 15aa66088e6cff334990fba64cc3cb5ad01f7df1 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Thu, 17 May 2018 20:27:19 +0800
Subject: [PATCH 36/38] redefine the function of bsip

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>

bsip work as virtual pending interrupt, not background sip.
bsip is readable and writeable to Hypervisor.
bsip is invisible to VM, but VM get logical OR of bsip and pending
interrupt delegated to VM when VM read sip.
---
 hw/riscv/sifive_clint.c  | 28 ++++++----------------------
 target-riscv/cpu.h       | 38 ++++++++++++++++++--------------------
 target-riscv/helper.c    | 15 ++++++++++++++-
 target-riscv/op_helper.c | 32 +++++++++++++++++++-------------
 4 files changed, 57 insertions(+), 56 deletions(-)

diff --git a/hw/riscv/sifive_clint.c b/hw/riscv/sifive_clint.c
index de1f9ef..4e49ce0 100644
--- a/hw/riscv/sifive_clint.c
+++ b/hw/riscv/sifive_clint.c
@@ -73,31 +73,15 @@ static void sifive_clint_irq_request(void *opaque, int irq, int level)
      * only htif(irq[4]) is external interrupt source
      */
     if(env->irq_flags & 0x10){
-        env->mip |= (MIP_MEIP |
-                MIP_MEIP & env->mideleg ? MIP_SEIP : 0U);
-        /*
-         * When set external interrupt bit in host OS,
-         * the corresponding bit in guest OS may should set, too.
-         * So do it, when clearing external interrupt bit.
-         */
-        if (env->virt_mode == 0 &&
-                MIP_SEIP & env->mideleg & env->hideleg) {
-            env->bsip |= MIP_SEIP;
-        }
-    }
-    else{
-        env->mip &= ~(MIP_MEIP |
-                MIP_MEIP & env->mideleg ? MIP_SEIP : 0U);
-        if (env->virt_mode == 0 &&
-                MIP_SEIP & env->mideleg & env->hideleg) {
-            env->bsip &= ~MIP_SEIP;
-        }
+        env->mip |= MIP_SEIP;
+    } else {
+        env->mip &= ~(MIP_MEIP | MIP_SEIP);
+        env->bsip &= ~MIP_SEIP;
     }
 
-    if(env->mip){
+    if ((env->mip | env->bsip) & env->mie) {
         cpu_interrupt(cs, CPU_INTERRUPT_HARD);
-    }
-    else{
+    } else {
         /* no interrupts pending, no host interrupt for HTIF, reset */
         cpu_reset_interrupt(cs, CPU_INTERRUPT_HARD);
     }
diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index b664d01..b67df78 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -386,32 +386,30 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
 
     target_ulong mie = get_field(env->mstatus, MSTATUS_MIE);
     target_ulong m_enabled = env->priv < PRV_M || (env->priv == PRV_M && mie);
-    target_ulong enabled_interrupts = pending_interrupts &
-                                      ~env->mideleg & -m_enabled;
-
-    if (env->virt_mode == 0) {
-        target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
-        target_ulong s_enabled = env->priv < PRV_S || (env->priv == PRV_S && sie);
-        enabled_interrupts |= pending_interrupts & env->mideleg &
-            -s_enabled;
-    }
-    else {
-        target_ulong bsie = get_field(env->bsstatus, BSSTATUS_SIE);
-        enabled_interrupts |= pending_interrupts & env->mideleg & ~env->hideleg &
-            -bsie;
-        target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
-        target_ulong s_enabled = env->priv < PRV_S || (env->priv == PRV_S && sie);
-        enabled_interrupts |= pending_interrupts & env->mideleg & env->hideleg &
-            -s_enabled;
-    }
+    target_ulong enabled_interrupts = pending_interrupts & ~env->mideleg
+        & -m_enabled;
+
+    target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
+    target_ulong s_enabled = env->virt_mode == 0 && (env->priv < PRV_S
+            || (env->priv == PRV_S && sie));
+    enabled_interrupts |= pending_interrupts & env->mideleg & ~env->hideleg
+        & -s_enabled;
+    target_ulong v_enabled = env->virt_mode == 1 && (env->priv < PRV_S
+            || (env->priv == PRV_S && sie));
+    enabled_interrupts |= ((pending_interrupts & env->mideleg & env->hideleg)
+            | (env->bsip & env->mie)) & -v_enabled;
 
     /*
      * The WFI instruction can also be executed when interrupts are disabled.
      * The operation of WFI must be unaffected by the global interrupt bits in
      * mstatus (MIE/SIE/UIE) and the delegation registers [m|s|u]ideleg.
      */
-    if(env->wfi){
-        enabled_interrupts = pending_interrupts;
+    if (env->wfi) {
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            enabled_interrupts = (env->bsip | env->mip) & env->mie;
+        } else {
+            enabled_interrupts = pending_interrupts;
+        }
     }
 
     if (enabled_interrupts) {
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index c86bee8..597c016 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -581,8 +581,13 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         env->bpc = backup_epc;
         swap_gpr_and_background_csrs(env);
         swap_foreground_background_csrs(env);
-        if(env->priv <= PRV_S && bit < 64 && ((deleg >> bit) & 1)) {
+        if((deleg >> bit) & 1) {
             /* handle in S-mode */
+            if (cs->exception_index & (0x70000000)) {
+                /* Interrupt not handled in Hypervisor.*/
+                env->sepc = env->pc;
+                env->pc = env->stvec;
+            }
             env->scause = fixed_cause;
             if (hasbadaddr) {
                 env->stval = env->tval;
@@ -602,7 +607,12 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             csr_write_helper(env, s, CSR_HSTATUS);
             set_privilege(env, PRV_S);
         } else {
+            env->scause = 0;
+            env->stval = 0;
+            env->hvtval = 0;
             /* handle in M-mode */
+            env->mepc = env->pc;
+            env->pc = env->mtvec;
             env->mcause = fixed_cause;
             if (hasbadaddr) {
                 env->mtval = env->tval;
@@ -616,6 +626,9 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             s = set_field(s, MSTATUS_MPP, env->priv);
             s = set_field(s, MSTATUS_MIE, 0);
             s = set_field(s, MSTATUS_MPV, env->virt_mode);
+            /* Prevent interrupt on hret. */
+            s = set_field(s, MSTATUS_SPIE, get_field(s, MSTATUS_SIE));
+            s = set_field(s, MSTATUS_SIE, 0);
             csr_write_helper(env, s, CSR_MSTATUS);
             set_privilege(env, PRV_M);
         }
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index 9d072dc..8547781 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -242,16 +242,25 @@ inline void csr_write_helper(CPURISCVState *env, target_ulong val_to_write,
         break;
     }
     case CSR_SIP: {
-        target_ulong next_mip = (env->mip & ~env->mideleg)
-                                | (val_to_write & env->mideleg);
+        target_ulong mask  = env->mideleg;
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            mask &= env->hideleg;
+        }
+        target_ulong next_mip = (env->mip & ~mask)
+            | (val_to_write & mask);
         csr_write_helper(env, next_mip, CSR_MIP);
         /* note: stw_phys should be done by the call to set MIP if necessary, */
         /* so we don't do it here */
         break;
     }
     case CSR_SIE: {
-        target_ulong next_mie = (env->mie & ~env->mideleg)
-                                | (val_to_write & env->mideleg);
+        target_ulong next_mie;
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            next_mie = val_to_write;
+        } else {
+            next_mie = (env->mie & ~env->mideleg)
+                | (val_to_write & env->mideleg);
+        }
         csr_write_helper(env, next_mie, CSR_MIE);
         break;
     }
@@ -539,7 +548,12 @@ inline target_ulong csr_read_helper(CPURISCVState *env, target_ulong csrno)
         return env->mstatus & mask;
     }
     case CSR_SIP:
-        return env->mip & env->mideleg;
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            return (env->mip & env->hideleg & env->mideleg)
+                | env->bsip;
+        } else {
+            return env->mip & env->mideleg;
+        }
     case CSR_SIE:
         return env->mie & env->mideleg;
     case CSR_SEPC:
@@ -766,13 +780,6 @@ static inline void swap_foreground_background_sstatus(CPURISCVState *env)
     env->bsstatus = ms & mask;
 }
 
-static inline void swap_foreground_background_sip(CPURISCVState *env)
-{
-    target_ulong bsip = env->bsip;
-    env->bsip = env->mip & env->mideleg;
-    env->mip = (env->mip & ~env->mideleg) | (bsip & env->mideleg);
-}
-
 static inline void swap_foreground_background_sie(CPURISCVState *env)
 {
     target_ulong bsie = env->bsie;
@@ -783,7 +790,6 @@ static inline void swap_foreground_background_sie(CPURISCVState *env)
 void swap_foreground_background_csrs(CPURISCVState *env)
 {
     swap_foreground_background_sstatus(env);
-    swap_foreground_background_sip(env);
     swap_foreground_background_sie(env);
     swap_foreground_background_csr(env, stvec);
     swap_foreground_background_csr(env, sscratch);
-- 
2.7.4

