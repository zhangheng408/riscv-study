From 9933917999ae700a75b0b3fd48f3fa588ef742e2 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Sat, 19 May 2018 09:40:41 +0800
Subject: [PATCH 39/39] add proper operation for WFI in VM

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>

WFI in VM will trigger VM Exit operation,
and will not change the state of CPU.
---
 target-riscv/cpu.h       |  2 ++
 target-riscv/helper.h    |  2 +-
 target-riscv/op_helper.c | 42 +++++++++++++++++++++++++++++++++++++-----
 target-riscv/translate.c |  6 +++++-
 4 files changed, 45 insertions(+), 7 deletions(-)

diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index 16a35c7..003788e 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -70,6 +70,8 @@
 #define RISCV_EXCP_HOST_PAGE_FAULT         0xe /* since: priv-1.11.0 */
 #define RISCV_EXCP_STORE_PAGE_FAULT        0xf /* since: priv-1.10.0 */
 
+#define RISCV_VM_EXIT_WFI                  0x10 /* since: priv-1.11 */
+
 #define TRANSLATE_HOST_FAIL 2
 #define TRANSLATE_FAIL 1
 #define TRANSLATE_SUCCESS 0
diff --git a/target-riscv/helper.h b/target-riscv/helper.h
index 77385c4..a824060 100644
--- a/target-riscv/helper.h
+++ b/target-riscv/helper.h
@@ -73,7 +73,7 @@ DEF_HELPER_4(csrrc, tl, env, tl, tl, tl)
 DEF_HELPER_2(sret, tl, env, tl)
 DEF_HELPER_2(hret, tl, env, tl)
 DEF_HELPER_2(mret, tl, env, tl)
-DEF_HELPER_1(wfi, void, env)
+DEF_HELPER_2(wfi, tl, env, tl)
 DEF_HELPER_1(tlb_flush, void, env)
 DEF_HELPER_1(fence_i, void, env)
 #endif
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index cce6aef..25f260f 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -892,14 +892,46 @@ target_ulong helper_mret(CPURISCVState *env, target_ulong cpu_pc_deb)
 }
 
 
-void helper_wfi(CPURISCVState *env)
+target_ulong helper_wfi(CPURISCVState *env, target_ulong next_pc)
 {
     CPUState *cs = CPU(riscv_env_get_cpu(env));
 
-    env->wfi = 1;
-    cs->halted = 1;
-    cs->exception_index = EXCP_HLT;
-    cpu_loop_exit(cs);
+    target_ulong retpc = next_pc;
+    if (env->virt_mode == 1 && env->priv <= PRV_S) {
+        /* VM Exit. */
+        retpc = env->bpc + 4;
+        env->bpc = next_pc;
+        swap_gpr_and_background_csrs(env);
+        swap_foreground_background_csrs(env);
+
+        env->hcause = RISCV_VM_EXIT_WFI;
+        env->stval = 0;
+        env->hvtval = 0;
+
+        target_ulong s = env->hstatus;
+        s = set_field(s, HSTATUS_SPP, env->priv);
+        csr_write_helper(env, s, CSR_HSTATUS);
+
+        s = env->mstatus;
+        /* Interrupt should be disabled.*/
+        s = set_field(s, MSTATUS_SIE, 0);
+        /* These fields will be ignored, but set it for safe*/
+        s = set_field(s, MSTATUS_SPIE, 0);
+        s = set_field(s, MSTATUS_SPP, PRV_S);
+        csr_write_helper(env, s, CSR_MSTATUS);
+
+        set_privilege(env, PRV_S);
+        env->virt_mode = 0;
+        tlb_flush(cs, 1);
+    } else {
+        env->wfi = 1;
+        cs->halted = 1;
+        cs->exception_index = EXCP_HLT;
+        cpu_loop_exit(cs);
+        /* cpu has exited, will not reach here, and will not return retpc.*/
+    }
+
+    return retpc;
 }
 
 void helper_fence_i(CPURISCVState *env)
diff --git a/target-riscv/translate.c b/target-riscv/translate.c
index c6d153e..7c45524 100644
--- a/target-riscv/translate.c
+++ b/target-riscv/translate.c
@@ -1393,8 +1393,12 @@ static void gen_system(DisasContext *ctx, uint32_t opc,
             exit(1);
             break;
         case 0x105: /* WFI */
+            /* cpu may exit this loop in wfi, set cpu_pc now.*/
             tcg_gen_movi_tl(cpu_pc, ctx->next_pc);
-            gen_helper_wfi(cpu_env);
+            gen_helper_wfi(cpu_pc, cpu_env, cpu_pc);
+            /* cpu may not reach here.*/
+            tcg_gen_exit_tb(0); /* no chaining */
+            ctx->bstate = BS_BRANCH;
             break;
         case 0x104: /* SFENCE.VM */
             gen_helper_tlb_flush(cpu_env);
-- 
2.7.4

