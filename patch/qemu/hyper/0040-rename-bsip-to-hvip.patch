From 66a8ffdaac759f1c8c1926f16a63b0a802de6eb3 Mon Sep 17 00:00:00 2001
From: Zhang Heng <zhangheng@mprc.pku.edu.cn>
Date: Sat, 19 May 2018 10:39:43 +0800
Subject: [PATCH 40/40] rename bsip to hvip

Signed-off-by: Zhang Heng <zhangheng@mprc.pku.edu.cn>
---
 hw/riscv/sifive_clint.c   |  4 ++--
 include/disas/riscv-opc.h |  4 ++--
 target-riscv/cpu.h        | 14 +++++++++-----
 target-riscv/helper.c     |  2 +-
 target-riscv/op_helper.c  | 10 +++++-----
 5 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/hw/riscv/sifive_clint.c b/hw/riscv/sifive_clint.c
index 4e49ce0..44e4924 100644
--- a/hw/riscv/sifive_clint.c
+++ b/hw/riscv/sifive_clint.c
@@ -76,10 +76,10 @@ static void sifive_clint_irq_request(void *opaque, int irq, int level)
         env->mip |= MIP_SEIP;
     } else {
         env->mip &= ~(MIP_MEIP | MIP_SEIP);
-        env->bsip &= ~MIP_SEIP;
+        env->hvip &= ~MIP_SEIP;
     }
 
-    if ((env->mip | env->bsip) & env->mie) {
+    if ((env->mip | env->hvip) & env->mie) {
         cpu_interrupt(cs, CPU_INTERRUPT_HARD);
     } else {
         /* no interrupts pending, no host interrupt for HTIF, reset */
diff --git a/include/disas/riscv-opc.h b/include/disas/riscv-opc.h
index cfd8bfc..92c3073 100644
--- a/include/disas/riscv-opc.h
+++ b/include/disas/riscv-opc.h
@@ -566,7 +566,7 @@
 #define CSR_BSEPC 0x941
 #define CSR_BSCAUSE 0x942
 #define CSR_BSTVAL 0x943
-#define CSR_BSIP 0x944
+#define CSR_HVIP 0x944
 #define CSR_BSATP 0x980
 #define CSR_MSTATUS 0x300
 #define CSR_MISA 0x301
@@ -1057,7 +1057,7 @@ DECLARE_CSR(hedeleg, CSR_HEDELEG)
 DECLARE_CSR(hatp, CSR_HATP)
 DECLARE_CSR(hcause, CSR_HCAUSE)
 DECLARE_CSR(bsstatus, CSR_BSSTATUS)
-DECLARE_CSR(bsip, CSR_BSIP)
+DECLARE_CSR(hvip, CSR_HVIP)
 DECLARE_CSR(bsie, CSR_BSIE)
 DECLARE_CSR(bstvec, CSR_BSTVEC)
 DECLARE_CSR(bsscratch, CSR_BSSCRATCH)
diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index 003788e..62431e5 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -199,6 +199,11 @@ typedef struct CPURISCVState {
     target_ulong hedeleg;
     target_ulong hideleg;
     /*
+     * Hypervisor Virtual Interrupt Pending
+     * Hypervisor may inject virtual interrupt to VM through this register.
+     */
+    target_ulong hvip;
+    /*
      * Background Supervisor Status
      */
     target_ulong bsstatus;
@@ -209,9 +214,8 @@ typedef struct CPURISCVState {
     target_ulong bsp;
     target_ulong bpc;
     /*
-     * Background Supervisor Interrupt Registers
+     * Background Supervisor Interrupt Enable Registers
      */
-    target_ulong bsip;
     target_ulong bsie;
     /*
      * Background Supervisor Trap Vector Base Address Register
@@ -399,7 +403,7 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
     target_ulong s_enabled = env->virt_mode == 0 && (env->priv < PRV_S
             || (env->priv == PRV_S && sie));
     if (env->virt_mode == 1 && env->priv <= PRV_S) {
-        enabled_interrupts |= env->mip & env->bsip & env->mideleg
+        enabled_interrupts |= env->mip & env->hvip & env->mideleg
             & ~env->hideleg & -s_enabled;
     } else {
         enabled_interrupts |= pending_interrupts & env->mideleg & ~env->hideleg
@@ -408,7 +412,7 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
     target_ulong v_enabled = env->virt_mode == 1 && (env->priv < PRV_S
             || (env->priv == PRV_S && sie));
     enabled_interrupts |= ((pending_interrupts & env->mideleg & env->hideleg)
-            | (env->bsip & env->mie)) & -v_enabled;
+            | (env->hvip & env->mie)) & -v_enabled;
 
     /*
      * The WFI instruction can also be executed when interrupts are disabled.
@@ -417,7 +421,7 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
      */
     if (env->wfi) {
         if (env->virt_mode == 1 && env->priv <= PRV_S) {
-            enabled_interrupts = (env->bsip | env->mip) & env->mie;
+            enabled_interrupts = (env->hvip | env->mip) & env->mie;
         } else {
             enabled_interrupts = pending_interrupts;
         }
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index 658f7f7..f85ed22 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -573,7 +573,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         }
     }
     target_ulong virt_int = (cs->exception_index & (0x70000000)) && (bit < 64)
-        && ((1UL<<bit) & env->bsip & env->mie) && !((1UL<<bit) & env->mip & env->mie);
+        && ((1UL<<bit) & env->hvip & env->mie) && !((1UL<<bit) & env->mip & env->mie);
 
     if (env->virt_mode == 1 && env->priv <= PRV_S && bit < 64 && !((hdeleg >> bit) & 1) && !virt_int) {
         /* trap from virtual machine and not handled int VM */
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index 25f260f..5242754 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -342,8 +342,8 @@ inline void csr_write_helper(CPURISCVState *env, target_ulong val_to_write,
     case CSR_BSP:
         env->bsp = val_to_write;
         break;
-    case CSR_BSIP:
-        env->bsip = val_to_write;
+    case CSR_HVIP:
+        env->hvip = val_to_write;
         break;
     case CSR_BSIE:
         env->bsie = val_to_write;
@@ -554,7 +554,7 @@ inline target_ulong csr_read_helper(CPURISCVState *env, target_ulong csrno)
     case CSR_SIP:
         if (env->virt_mode == 1 && env->priv <= PRV_S) {
             return (env->mip & env->hideleg & env->mideleg)
-                | env->bsip;
+                | env->hvip;
         } else {
             return env->mip & env->mideleg;
         }
@@ -608,8 +608,8 @@ inline target_ulong csr_read_helper(CPURISCVState *env, target_ulong csrno)
         return env->bpc;
     case CSR_BTP:
         return env->btp;
-    case CSR_BSIP:
-        return env->bsip;
+    case CSR_HVIP:
+        return env->hvip;
     case CSR_BSIE:
         return env->bsie;
     case CSR_BSTVEC:
-- 
2.7.4

