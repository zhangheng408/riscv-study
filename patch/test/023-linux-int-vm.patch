diff --git a/arch/riscv/kernel/irq.c b/arch/riscv/kernel/irq.c
index 91124d2..5fb0a56 100644
--- a/arch/riscv/kernel/irq.c
+++ b/arch/riscv/kernel/irq.c
@@ -45,13 +45,15 @@ asmlinkage void __irq_entry do_IRQ(unsigned int cause, struct pt_regs *regs)
 	riscv_intc_irq(cause, regs);
 #endif
 
-	if (sip & SIE_STIE) {
-		riscv_timer_interrupt(regs);
-	}
-
 	if(sip & SIE_SEIE) {
 #ifdef CONFIG_SBI_CONSOLE
 		sbi_console_isr();
 #endif
 	}
+
+	if (sip & SIE_STIE) {
+		riscv_timer_interrupt(regs);
+	}
+
+	csr_clear(scause, ~0L);
 }
diff --git a/arch/riscv/kvm/kvm_riscv.c b/arch/riscv/kvm/kvm_riscv.c
index 03d9691a..44266cb 100644
--- a/arch/riscv/kvm/kvm_riscv.c
+++ b/arch/riscv/kvm/kvm_riscv.c
@@ -258,14 +258,19 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)
 
 	for (;;) {
 		/*
-		 * setup sstatus, prepare going into vm.
-		 * leave sstatus.spie as before.
+		 * inject timer interrupt
 		 */
 		if (get_cycles64() >= vcpu->kvm->arch.timecmp) {
 			csr_set(bsip, SIE_STIE);
 		} else {
 			csr_clear(bsip, SIE_STIE);
 		}
+	    csr_clear(scause, ~0L);
+
+		/*
+		 * setup sstatus, prepare going into vm.
+		 * leave sstatus.spie as before.
+		 */
 		if (vcpu->arch.prv) {
 			csr_set(sstatus, SR_PS);
 		} else {
@@ -297,6 +302,12 @@ int handle_vm_exit(struct kvm_vcpu *vcpu)
 		case EXC_HOST_PAGE_FAULT:
 			ret = handle_host_page_fault(vcpu);
 			break;
+		case 0:
+			/*
+			 * VM exit because of un delegated interrupt, no need to handle
+			 */
+			ret = 1;
+			break;
 		default:
 			printk("%s: unspported vm exit %lx\n", __func__, scause);
 			return -ENOIOCTLCMD;
