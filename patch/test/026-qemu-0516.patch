diff --git a/hw/riscv/sifive_clint.c b/hw/riscv/sifive_clint.c
index de1f9ef..a362df1 100644
--- a/hw/riscv/sifive_clint.c
+++ b/hw/riscv/sifive_clint.c
@@ -69,35 +69,43 @@ static void sifive_clint_irq_request(void *opaque, int irq, int level)
         env->irq_flags &= ~(1U<<irq);
     }
 
-    /*
-     * only htif(irq[4]) is external interrupt source
-     */
-    if(env->irq_flags & 0x10){
-        env->mip |= (MIP_MEIP |
-                MIP_MEIP & env->mideleg ? MIP_SEIP : 0U);
-        /*
-         * When set external interrupt bit in host OS,
-         * the corresponding bit in guest OS may should set, too.
-         * So do it, when clearing external interrupt bit.
-         */
-        if (env->virt_mode == 0 &&
-                MIP_SEIP & env->mideleg & env->hideleg) {
-            env->bsip |= MIP_SEIP;
-        }
-    }
-    else{
-        env->mip &= ~(MIP_MEIP |
-                MIP_MEIP & env->mideleg ? MIP_SEIP : 0U);
-        if (env->virt_mode == 0 &&
-                MIP_SEIP & env->mideleg & env->hideleg) {
-            env->bsip &= ~MIP_SEIP;
+
+    if (env->irq_flags & 0x10) { //HTIF_IRQ
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            if (env->mideleg & env->hideleg & MIP_SEIP) {
+                env->mip |= MIP_SEIP;
+                env->bsip &= ~MIP_SEIP;
+                env->mip &= ~MIP_MEIP;
+            } else if (env->mideleg & MIP_SEIP) {
+                env->bsip |= MIP_SEIP;
+                env->mip &= ~(MIP_SEIP | MIP_MEIP);
+            } else {
+                env->mip |= MIP_MEIP;
+                env->bsip &= ~MIP_SEIP;
+                env->mip &= ~MIP_SEIP;
+            }
+        } else {
+            if (env->mideleg & MIP_SEIP) {
+                env->mip |= MIP_SEIP;
+                env->mip &= ~MIP_MEIP;
+                env->bsip &= ~MIP_SEIP;
+            } else {
+                env->mip |= MIP_MEIP;
+                env->bsip &= ~MIP_SEIP;
+                env->mip &= ~MIP_SEIP;
+            }
         }
+    } else {
+        env->mip &= ~(MIP_SEIP | MIP_MEIP);
+        env->bsip &= ~MIP_SEIP;
     }
 
-    if(env->mip){
+    //if (env->mip & env->mie
+    //        || env->virt_mode == 1 && env->priv <= PRV_S
+    //            && (env->bsip & env->bsie)) {
+    if (env->mip) {
         cpu_interrupt(cs, CPU_INTERRUPT_HARD);
-    }
-    else{
+    } else {
         /* no interrupts pending, no host interrupt for HTIF, reset */
         cpu_reset_interrupt(cs, CPU_INTERRUPT_HARD);
     }
@@ -118,7 +126,7 @@ static void sifive_clint_timer_update(CPURISCVState *env)
         /* if we're setting an MTIMECMP value in the "past",
            immediately raise the timer interrupt */
         env->mip |= MIP_MTIP;
-        qemu_irq_raise(env->irq[3]);
+        qemu_irq_raise(MTIP_IRQ);
         return;
     }
 
@@ -136,13 +144,17 @@ static void sifive_clint_timer_update(CPURISCVState *env)
  */
 static void sifive_clint_timer_expire(CPURISCVState *env)
 {
+	printd("timer expire, pc %lx, int %lx/%lx/%lx/%lx, priv %lx/%lx, rtc %lx\n",
+			env->pc, env->mip, env->mie, env->mideleg, env->hideleg,
+			env->priv, env->virt_mode, cpu_riscv_read_rtc());
     /* do not call update here */
     env->mip |= MIP_MTIP;
-    qemu_irq_raise(env->irq[3]);
+    qemu_irq_raise(MTIP_IRQ);
 }
 
 static void sifive_clint_write_timecmp(CPURISCVState *env, uint64_t value)
 {
+	printd("pc %lx, update timecmp %lx\n", env->pc, value);
     env->timecmp = value;
     env->mip &= ~MIP_MTIP;
     sifive_clint_timer_update(env);
diff --git a/include/qemu-common.h b/include/qemu-common.h
index 9e8b0bd..cd9e045 100644
--- a/include/qemu-common.h
+++ b/include/qemu-common.h
@@ -138,4 +138,7 @@ void page_size_init(void);
  * returned. */
 bool dump_in_progress(void);
 
+#define printd(fmt, ...)                                         \
+    fprintf(stderr, "%s/%d: " fmt, __func__, __LINE__, ##__VA_ARGS__)
+
 #endif
diff --git a/target-riscv/cpu.h b/target-riscv/cpu.h
index b664d01..440a012 100644
--- a/target-riscv/cpu.h
+++ b/target-riscv/cpu.h
@@ -386,22 +386,23 @@ static inline int cpu_riscv_hw_interrupts_pending(CPURISCVState *env)
 
     target_ulong mie = get_field(env->mstatus, MSTATUS_MIE);
     target_ulong m_enabled = env->priv < PRV_M || (env->priv == PRV_M && mie);
-    target_ulong enabled_interrupts = pending_interrupts &
-                                      ~env->mideleg & -m_enabled;
+    target_ulong enabled_interrupts = pending_interrupts & ~env->mideleg
+        & -m_enabled;
 
-    if (env->virt_mode == 0) {
-        target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
-        target_ulong s_enabled = env->priv < PRV_S || (env->priv == PRV_S && sie);
-        enabled_interrupts |= pending_interrupts & env->mideleg &
-            -s_enabled;
-    }
-    else {
+    if (env->virt_mode == 1 && env->priv <= PRV_S) {
         target_ulong bsie = get_field(env->bsstatus, BSSTATUS_SIE);
-        enabled_interrupts |= pending_interrupts & env->mideleg & ~env->hideleg &
-            -bsie;
+        enabled_interrupts |= env->bsip & env->bsie & env->mideleg
+            & ~env->hideleg & -bsie;
         target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
-        target_ulong s_enabled = env->priv < PRV_S || (env->priv == PRV_S && sie);
-        enabled_interrupts |= pending_interrupts & env->mideleg & env->hideleg &
+        target_ulong s_enabled = env->priv < PRV_S
+            || (env->priv == PRV_S && sie);
+        enabled_interrupts |= pending_interrupts & env->mideleg
+            & env->hideleg & -s_enabled;
+    } else {
+        target_ulong sie = get_field(env->mstatus, MSTATUS_SIE);
+        target_ulong s_enabled = env->priv < PRV_S
+            || (env->priv == PRV_S && sie);
+        enabled_interrupts |= pending_interrupts & env->mideleg &
             -s_enabled;
     }
 
diff --git a/target-riscv/helper.c b/target-riscv/helper.c
index c86bee8..ef32686 100644
--- a/target-riscv/helper.c
+++ b/target-riscv/helper.c
@@ -36,6 +36,10 @@ bool riscv_cpu_exec_interrupt(CPUState *cs, int interrupt_request)
         RISCVCPU *cpu = RISCV_CPU(cs);
         CPURISCVState *env = &cpu->env;
         int interruptno = cpu_riscv_hw_interrupts_pending(env);
+		printd("pc %lx, int %lx/%lx/%lx/%lx, priv %lx/%lx, rtc %lx, NO. %x, sie %lx, mie %lx\n",
+				env->pc, env->mip, env->mie, env->mideleg, env->hideleg,
+				env->priv, env->virt_mode, cpu_riscv_read_rtc(), interruptno,
+				get_field(env->mstatus, MSTATUS_SIE), get_field(env->mstatus, MSTATUS_MIE));
         if (interruptno + 1) {
             cs->exception_index = 0x70000000U | interruptno;
             riscv_cpu_do_interrupt(cs);
@@ -547,6 +551,10 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             fixed_cause = cs->exception_index;
         }
     }
+	printd("pc %lx, fixed cause %lx, int %lx/%lx/%lx/%lx, priv %lx/%lx, rtc %lx, addr %lx/%lx\n",
+			env->pc, fixed_cause, env->mip, env->mie, env->mideleg, env->hideleg,
+			env->priv, env->virt_mode, cpu_riscv_read_rtc(),
+            env->tval, env->vtval);
 
     target_ulong backup_epc = env->pc;
 
@@ -573,7 +581,7 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         }
     }
 
-    if (env->virt_mode == 1 && bit < 64 && !((hdeleg >> bit) & 1)) {
+    if (env->virt_mode == 1 && env->priv <= PRV_S && bit < 64 && !((hdeleg >> bit) & 1)) {
         /* trap from virtual machine and not handled int VM */
         /* perform vm exit */
         env->pc = env->bpc + 4;
@@ -581,8 +589,12 @@ void riscv_cpu_do_interrupt(CPUState *cs)
         env->bpc = backup_epc;
         swap_gpr_and_background_csrs(env);
         swap_foreground_background_csrs(env);
-        if(env->priv <= PRV_S && bit < 64 && ((deleg >> bit) & 1)) {
+        if((deleg >> bit) & 1) {
             /* handle in S-mode */
+			if (cs->exception_index & (0x70000000)) {
+				env->sepc = env->pc;
+				env->pc = env->stvec;
+			}
             env->scause = fixed_cause;
             if (hasbadaddr) {
                 env->stval = env->tval;
@@ -596,13 +608,11 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             s = set_field(s, MSTATUS_SPP, env->priv);
             s = set_field(s, MSTATUS_SIE, 0);
             csr_write_helper(env, s, CSR_MSTATUS);
-            // is SPV necessarty ?
-            s = env->hstatus;
-            s = set_field(s, HSTATUS_SPV, env->virt_mode);
-            csr_write_helper(env, s, CSR_HSTATUS);
             set_privilege(env, PRV_S);
         } else {
             /* handle in M-mode */
+			env->mepc = env->pc;
+			env->pc = env->mtvec;
             env->mcause = fixed_cause;
             if (hasbadaddr) {
                 env->mtval = env->tval;
@@ -615,12 +625,19 @@ void riscv_cpu_do_interrupt(CPUState *cs)
             s = set_field(s, MSTATUS_MPIE, get_field(s, MSTATUS_MIE));
             s = set_field(s, MSTATUS_MPP, env->priv);
             s = set_field(s, MSTATUS_MIE, 0);
+            /* Now, MPV is not used. */
             s = set_field(s, MSTATUS_MPV, env->virt_mode);
+            /* Prevent interrupt on hret. */
+            s = set_field(s, MSTATUS_SPIE, get_field(s, MSTATUS_SIE));
+            s = set_field(s, MSTATUS_SPP, env->priv);
+            s = set_field(s, MSTATUS_SIE, 0);
             csr_write_helper(env, s, CSR_MSTATUS);
             set_privilege(env, PRV_M);
         }
         env->virt_mode = 0;
         tlb_flush(cs, 1);
+		printd("vm exit, pc %lx/%lx,int %lx/%lx/%lx/%lx, priv %lx, rtc %lx\n",
+				env->pc, env->bpc, env->mip, env->mie, env->mideleg, env->hideleg, env->priv, cpu_riscv_read_rtc());
     } else if (env->priv <= PRV_S && bit < 64 && ((deleg >> bit) & 1)) {
         /* handle the trap in S-mode */
         /* No need to check STVEC for misaligned - lower 2 bits cannot be set */
diff --git a/target-riscv/op_helper.c b/target-riscv/op_helper.c
index 9d072dc..7aa3d8b 100644
--- a/target-riscv/op_helper.c
+++ b/target-riscv/op_helper.c
@@ -163,6 +163,11 @@ inline void csr_write_helper(CPURISCVState *env, target_ulong val_to_write,
         target_ulong mask = MIP_SSIP | MIP_STIP;
         env->mip = (env->mip & ~mask) |
             (val_to_write & mask);
+        if (env->mip & MIP_MSIP) {
+            qemu_irq_raise(MSIP_IRQ);
+        } else {
+            qemu_irq_lower(MSIP_IRQ);
+        }
         if (env->mip & MIP_SSIP) {
             qemu_irq_raise(SSIP_IRQ);
         } else {
@@ -173,11 +178,6 @@ inline void csr_write_helper(CPURISCVState *env, target_ulong val_to_write,
         } else {
             qemu_irq_lower(STIP_IRQ);
         }
-        if (env->mip & MIP_MSIP) {
-            qemu_irq_raise(MSIP_IRQ);
-        } else {
-            qemu_irq_lower(MSIP_IRQ);
-        }
         break;
     }
     case CSR_MIE: {
@@ -242,16 +242,24 @@ inline void csr_write_helper(CPURISCVState *env, target_ulong val_to_write,
         break;
     }
     case CSR_SIP: {
-        target_ulong next_mip = (env->mip & ~env->mideleg)
-                                | (val_to_write & env->mideleg);
+        target_ulong mask  = env->mideleg;
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            mask &= env->hideleg;
+        }
+        target_ulong next_mip = (env->mip & ~mask)
+                                | (val_to_write & mask);
         csr_write_helper(env, next_mip, CSR_MIP);
         /* note: stw_phys should be done by the call to set MIP if necessary, */
         /* so we don't do it here */
         break;
     }
     case CSR_SIE: {
-        target_ulong next_mie = (env->mie & ~env->mideleg)
-                                | (val_to_write & env->mideleg);
+        target_ulong mask  = env->mideleg;
+        if (env->virt_mode == 1 && env->priv <= PRV_S) {
+            mask &= env->hideleg;
+        }
+        target_ulong next_mie = (env->mie & ~mask)
+                                | (val_to_write & mask);
         csr_write_helper(env, next_mie, CSR_MIE);
         break;
     }
@@ -848,6 +856,8 @@ target_ulong helper_hret(CPURISCVState *env, target_ulong cpu_pc_deb)
     if (!riscv_feature(env, RISCV_FEATURE_RVC) && (retpc & 0x3)) {
         helper_raise_exception(env, RISCV_EXCP_INST_ADDR_MIS);
     }
+	printd("vm entry, pc %lx/%lx,int %lx/%lx/%lx/%lx, priv %lx, rtc %lx\n",
+			env->pc, env->bpc, env->mip, env->mie, env->mideleg, env->hideleg, env->priv, cpu_riscv_read_rtc());
 
     target_ulong mstatus = env->mstatus;
     target_ulong prev_priv = get_field(mstatus, MSTATUS_SPP);
